
*/
class AGun;
class USkeletalMeshComponent;
UCLASS(Abstract)
class WRAITHSHOOTER_API AWeaponPickup : public PickupActor
{
	GENERATED_BODY()
    
    AWeaponPickup();

public:
    /* Class to add to inventory when picked up */
    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "WeaponClass")
    TSubclassOf<AGun> WeaponClass;
    
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = WeaponClass)
    AGun* GunRef;
    
    //UFUNCTION(BlueprintCallable, Category = WeaponPickupEffects)
    //void OnUsed(APawn* InstigatorPawn);
    
    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent,Category = WeaponPickupEffects)
    void DrawVFX();

};


// Fill out your copyright notice in the Description page of Project Settings.


#include "WeaponPickup.h"
#include "Gun.h"
#include "ShooterCharacter.h"
#include "ShooterPlayerController.h"
#include "Components/SkeletalMeshComponent.h"
AWeaponPickup::AWeaponPickup()
{
    
}
/*(void AWeaponPickup::OnUsed(APawn* InstigatorPawn)
{
    AShooterCharacter* MyPawn = Cast<AShooterCharacter>(InstigatorPawn);
    if (MyPawn)
    {
       
        if (MyPawn->WeaponSlotAvailable(WeaponClass->GetDefaultObject<AGun>()->GetStorageSlot()))
        {
            FActorSpawnParameters SpawnInfo;
            SpawnInfo.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;
            AGun* NewWeapon = GetWorld()->SpawnActor<AGun>(WeaponClass, SpawnInfo);
            
            MyPawn->AddWeapon(NewWeapon);
            
            Super::OnUsed(InstigatorPawn);
        }
        else
        {
            AShooterPlayerController* PC = Cast<AShooterPlayerController>(MyPawn->GetController());
            if (PC)
            {
                ////TODO: ADD UI
            }
        }
    }
}
*/


